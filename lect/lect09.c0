
// means x is in the segment A[lower,upper)
// return true iff there is an index
// i such that x = A[i], where lower <= i < upper.
// returns false if there is no such index.

bool is_in(int x, int[] A, int lower, int upper) 
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i < upper; i = i + 1) 
    //@ loop_invariant lower <= i;
    {
      if (A[i] == x) return true;
    }

  return false;
}

// not much to say about the post-condition:
// this is a *specification function*

// means A[lower,upper) is sorted in increasing order

bool is_sorted(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i < upper - 1 ; i = i + 1) // start with i < upper
    //@ loop_invariant lower <= i;  
    {
      /* first attempt, if the exit test is i < upper:

      //A[i] is safe:
      //  0 <= i because 0 <= lower <= i;
      // i < \length(A) because i < upper <= \length(A);

      //A[i+1] is safe:
      //  0 <= i+1 because 0 <= i;
      //  i+1 < \length(A) because i < upper so i+1 < upper +1 ... uh oh
      
      */

      /* corrected:

      //A[i] is safe:
      //  0 <= i because 0 <= lower <= i;
      // i < \length(A) because i < upper - 1 < upper <= \length(A);

      //A[i+1] is safe:
      //  0 <= i+1 because 0 <= i;
      //  i+1 < \length(A) because i < upper - 1 so i+1 < upper <= \length(A)
      
      */
      
      if (A[i] > A[i+1]) return false;
    }

  return true;
}

// returns the i such that A[i] == x 
//  iff there is some 0 <= i < n for which this is true.
// returns -1 otherwise.  
// stops early if it passes where x would be.  

int search(int x, int[] A, int n) 
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A,0,n);
/*@ensures (\result == -1 && !is_in(x,A,0,n)) || 
           (0 <= \result && \result < n && A[\result] == x);@*/
{

  for (int i = 0; i < n ; i = i + 1) 
    //@ loop_invariant 0 <= i && i <= n;

    //@ loop_invariant !is_in(x,A,0,i);
    // Initially, i == 0, and !is_in(x,A,0,0) because it's empty.  
    // Preservation: Assume !is_in(x,A,0,i)
    // To show: !is_in(x,A,0,i').  i' = i + 1, so suffices to show !is_in(x,A,0,i) and A[i] != x.
    //          The first is true by the loop invariant holding initially.  
    //          The second is true by the if test *if we get to the end of the loop*
    {
      if (A[i] == x) {
        return i; 
        // post-condititon: 0 <= i by LI. i < n by test. A[i] == x by test.
      }
      else if (A[i] > x) 
        {
          return -1;
          // post-condition: 
          // A[i] > x by test, so !is_in(x,A,i,n) because A is sorted
          // !is_in(x,A,0,i) by LI
          // A is sorted, so there is nowhere for x to go!
        }
      
    }

  // postcondition: i == n (i <= n by LI, !(i<n) by loop test)
  // and !is_in(x,A,0,i) by the loop invariant, so
  // !is_in(x,A,0,n)
  return -1;

}

// running time is proportional to n in the worst case

void test_search() {

  int[] A = alloc_array(int,3);
  
  A[0] = 1;
  A[1] = 4;
  A[2] = 5;

  assert(-1 == search(6,A,3));
  assert(-1 == search(3,A,3));
  assert(1 == search(4,A,3));

}