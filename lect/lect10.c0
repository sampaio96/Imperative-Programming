//return true iff A[lower,upper) is sorted
bool is_sorted(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i + 1 < upper; i = i + 1) 
    //@loop_invariant 0 <= i;
    {
      if (A[i] > A[i+1]) { return false; }
    }
  return true;
}

// return true iff x <= A[lower,upper)
bool le_seg (int x, int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i < upper; i = i + 1) 
    //loop_invariant lower <= && i <= upper;
    {
      if (! (x <= A[i])) { return false; }
    }
  return true;
}

// return true iff 
//  A[lower1,upper1) <= A[lower2, upper2]
// i.e. everything in A[lower1,upper1) is <= 
//      everything in A[lower2,upper2)
bool le_segs(int[] A, int lower1, int upper1, int lower2, int upper2) 
//@requires 0 <= lower1 && lower1 <= upper1 && upper1 <= \length(A);
//@requires 0 <= lower2 && lower2 <= upper2 && upper2 <= \length(A);
{
  for (int i = lower1; i < upper1; i = i + 1) 
    //loop_invariant 0 <= i;
    {
      if (! (le_seg(A[i],A,lower2,upper2))) {return false;}
    }
  return true;
}

void test_le_segs() 
{
  int[] A = alloc_array(int,4);
  A[0] = 4;
  A[1] = 3;
  A[2] = 2;
  A[3] = 1;

  assert(le_segs(A,2,4,0,2) == true);
  assert(le_segs(A,0,2,2,4) == false);
}

void swap(int[] A, int i, int j)
//@requires 0 <= i && i < \length(A);
//@requires 0 <= j && j < \length(A);
{
  int tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
}

void test_swap() 
{
  int[] A = alloc_array(int,2);
  A[0] = 12;
  A[1] = 13;
  
  swap(A,0,1);

  assert(A[0] == 13);
  assert(A[1] == 12);
    
}

int min_index(int[] A, int lower, int upper) 
//@requires 0 <= lower && lower < upper && upper <= \length(A);
//@ensures lower <= \result && \result < upper;
//@ensures le_seg(A[\result],A,lower,upper);
{
  
  int min_index = lower;

  for (int i = lower+1; i < upper; i = i + 1) 
    //@loop_invariant lower <= i && i <= upper;
    //@loop_invariant lower <= min_index && min_index < upper;
    //@loop_invariant le_seg(A[min_index],A,lower,i);
    {
      if (A[i] < A[min_index]) 
        {
          min_index = i;
        }
    }

  // at the end, i == upper, so postcondition holds

  return min_index;
}

void sort(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(A,lower,upper);
{
  for (int i = lower; i < upper; i = i + 1)
    //@loop_invariant lower <= i && i <= upper;
    //@loop_invariant is_sorted(A,lower,i);
    //@loop_invariant le_segs(A,lower,i,i,upper);
    {
      int next_smallest_index = min_index(A,i,upper);
      swap(A,i,next_smallest_index);
    }

  // at the end, i == upper, so is_sorted(A,lower,upper)

}

// Timing on randomly generated array of size n, 100 times
// n    time
// 2^8  0.025
// 2^9  0.09
// 2^10 0.3
// 2^11 1.15
// 2^12 4.54
// 2^13 18
// 2^13 74
