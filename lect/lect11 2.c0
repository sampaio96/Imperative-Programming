int binsearch(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
		|| (0 <= \result && \result < n && A[\result] == x); @*/
{
	int lower = 0;
	int upper = n;

	while ( lower < upper )
	//@loop_invariant 0 <= lower && lower <= upper && upper <= n;
	//@loop_invariant lower == 0 || (A[lower - 1] < x);
	//@loop_invariant (upper == n) || (x < A[upper]);

	{
	int mid = (upper - lower) / 2 + lower;
	//@assert lower <= mid && mid < upper;
	if (A[mid] == x) { return mid; }
	else if (A[mid] > x) { upper = mid; }
	else {
	//@assert A[mid] < x;
		lower = mid + 1; }
	}

return -1;

}