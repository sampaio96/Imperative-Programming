
// only works for numbers up to 10
string suffix1(int y) {

  string s;

  if (y == 1) {
    s = "st";
  }
  else if (y == 2) {
    s = "nd";
  }
  else if (y == 3) {
    s = "rd";
  }
  else {
    s = "th";
  }

  return s;

}

/* write the better version directly
// works for all positive numbers 
string suffix2(int y) {

  string s;

  if (10 <= y % 10 && y % 10 <= 20) {
    s = "th";
  }
  else {
    int last_digit = y % 10;

    if (last_digit == 1) {
      s = "st";
    }
    else if (last_digit == 2) {
      s = "nd";
    }
    else if (last_digit == 3) {
      s = "rd";
    }
    else {
      s = "th";
    }
  }

  return s;
}
*/

// work for all non-negative numbers 
string suffix3(int y) {

  int last_two_digits = y % 100;
  if (10 <= last_two_digits && 
      last_two_digits <= 20) {
    return "th";
  }
  else {
    int last_digit = y % 10;
    return suffix1(last_digit);
  }

}

// for example:
// format(1) == "1st"
// format(2) == "2nd"
string format(int x) {
  return string_join(string_fromint(x),
                     suffix3(x));
}





// return the number
// 1 + 2 + 3 + 4 + ... + x
int add_upto(int x) {

  int sum_so_far = 0;

  int i = 0;

  /* alternate way of of writing it:
  while (i < x) {
    i = i + 1;
    sum_so_far = sum_so_far + i;
  }
  */

  while (i <= x) {
    sum_so_far = sum_so_far + i;
    i = i + 1;
  }

  return sum_so_far;
  
}



// A is an array
// length is the number of things in A
int sum_array(int[] A, int length) {
  
  // A[0] + A[1] + A[2] + A[3]

  int sum_so_far = 0;

  int i = 0;
  while (i < length) {
    // do this for the last time when i is length-1
    sum_so_far = sum_so_far + A[i];
    i = i + 1;
  }

  return sum_so_far;

}